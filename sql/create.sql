\c postgres

DROP DATABASE IF EXISTS WB;
DROP DATABASE IF EXISTS ORDERS;

CREATE DATABASE WB;

\c wb;

CREATE TABLE ORDERS (
    ORDER_UID VARCHAR(100) PRIMARY KEY NOT NULL,
    TRACK_NUMBER VARCHAR(100),
    ENTRY VARCHAR(100),
    LOCALE VARCHAR(100),
    INTERNAL_SIGNATURE VARCHAR(100),
    CUSTOMER_ID VARCHAR(100),
    DELIVERY_SERVICE VARCHAR(100),
    SHARDKEY VARCHAR(100),
    SM_ID INTEGER,
    DATE_CREATED VARCHAR(100),
    OFF_SHARD VARCHAR(100)

);

CREATE TABLE DELIVERY (
    ID SERIAL NOT NULL PRIMARY KEY ,
    ORDER_UID  VARCHAR(100),
    FOREIGN KEY(ORDER_UID) REFERENCES ORDERS(ORDER_UID),
    NAME VARCHAR(100),
    PHONE VARCHAR(100), --MAX 14 NUMBERS + 5 EXTRA
    ZIP VARCHAR(100),
    CITY VARCHAR(100),
    ADDRESS VARCHAR(100),
    REGION VARCHAR (100),
    EMAIL VARCHAR(100)
);

CREATE TABLE PAYMENT (
    ID SERIAL NOT NULL PRIMARY KEY,
    ORDER_UID  VARCHAR(100),
    FOREIGN KEY(ORDER_UID) REFERENCES ORDERS(ORDER_UID),
    TRANSACTION VARCHAR(100),
    REQUEST_ID VARCHAR(100),
    CURRENCY VARCHAR (100),
    PROVIDER VARCHAR (100),
    AMOUNT INTEGER,
    PAYMENT_DT INTEGER,
    BANK VARCHAR(100),
    DELIVERY_COST INTEGER,
    GOODS_TOTAL INTEGER,
    CUSTOM_FEE INTEGER

);

CREATE TABLE ITEM (
    ID SERIAL NOT NULL PRIMARY KEY,
    ORDER_UID  VARCHAR(100),
    FOREIGN KEY(ORDER_UID) REFERENCES ORDERS(ORDER_UID),
    CHRT_ID INTEGER,
    TRACK_NUMBER VARCHAR(100),
    PRICE INTEGER,
    RID VARCHAR(100),
    NAME VARCHAR(100),
    SALE INTEGER,
    SIZE VARCHAR(100),
    TOTAL_PRICE INTEGER,
    NM_ID INTEGER,
    BRAND VARCHAR(100),
    STATUS INTEGER
);